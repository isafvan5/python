class ListNode:
    def __init__(self, value=0, prev=None, next=None):
        self.value = value
        self.prev = prev
        self.next = next

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def is_empty(self):
        return self.head is None

    def add_at_head(self, value):
        new_node = ListNode(value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def add_at_tail(self, value):
        new_node = ListNode(value)
        if self.tail is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def delete_at_head(self):
        if self.head:
            if self.head == self.tail:
                self.head = None
                self.tail = None
            else:
                self.head = self.head.next
                self.head.prev = None

    def print_list(self):
        current = self.head
        while current:
            print(current.value, end=" -> ")
            current = current.next
        print("None")

# Example usage for Doubly Linked List:
if __name__ == '__main__':
    doubly_linked_list = DoublyLinkedList()
    doubly_linked_list.add_at_head(10)
    doubly_linked_list.add_at_tail(20)
    doubly_linked_list.add_at_tail(30)
    doubly_linked_list.print_list()  # Output: 10 -> 20 -> 30 -> None
    doubly_linked_list.delete_at_head()
    doubly_linked_list.print_list()  # Output: 20 -> 30 -> None
